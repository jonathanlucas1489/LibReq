import java.util.ArrayList;


public class RequisicaoController {
	private ArrayList<Requisicao> oftalmo;
	private ArrayList<Requisicao> gineco;
	private ArrayList<Requisicao> neuro;
	private ArrayList<Requisicao> endocrino;
	private ArrayList<Requisicao> otorrino;
	private ArrayList<Requisicao> nutricio;
	private ArrayList<Requisicao> masto;
	private ArrayList<Requisicao> cardio;
	private ArrayList<Requisicao> gastro;
	private ArrayList<Requisicao> dermato;
	private ArrayList<Requisicao> cirurgiao;
	private ArrayList<Requisicao> angio;
	private ArrayList<Requisicao> alergista;
	private ArrayList<Requisicao> patologia;
	
	public RequisicaoController () {
		this.oftalmo = new ArrayList<Requisicao>();
		this.gineco = new ArrayList<Requisicao>();
		this.neuro = new ArrayList<Requisicao>();
		this.endocrino = new ArrayList<Requisicao>();
		this.otorrino = new ArrayList<Requisicao>();
		this.nutricio = new ArrayList<Requisicao>();
		this.masto = new ArrayList<Requisicao>();
		this.cardio = new ArrayList<Requisicao>();
		this.gastro = new ArrayList<Requisicao>();
		this.dermato = new ArrayList<Requisicao>();
		this.cirurgiao = new ArrayList<Requisicao>();
		this.angio = new ArrayList<Requisicao>();
		this.alergista = new ArrayList<Requisicao>();
		this.patologia = new ArrayList<Requisicao>();

	}
	
	public ArrayList<Requisicao> verificaEspecialidade(String especialidade) {
		if(especialidade.equals("01")) {
			return oftalmo;
		} else if (especialidade.equals("02")) {
			return gineco;
		} else if (especialidade.equals("03")) {
			return neuro;
		} else if (especialidade.equals("04")) {
			return endocrino;
		} else if (especialidade.equals("05")) {
			return otorrino;
		} else if (especialidade.equals("06")) {
			return nutricio;
		} else if (especialidade.equals("07")) {
			return masto;
		} else if (especialidade.equals("08")) {
			return cardio;
		} else if (especialidade.equals("09")) {
			return gastro;
		} else if (especialidade.equals("10")) {
			return dermato;
		} else if (especialidade.equals("11")) {
			return cirurgiao;
		} else if (especialidade.equals("12")) {
			return angio;
		} else if (especialidade.equals("13")) {
			return alergista;
		} else if (especialidade.equals("14")) {
			return patologia;
		} 
		return endocrino;
	}
	
	public void cadastrarRequisicao(String cartao, String nome, String bairro, String especialidade, String data) {
		Requisicao r = new Requisicao(cartao, nome, bairro, especialidade, data);	
		verificaEspecialidade(especialidade).add(r);
	}
	
	public void enviarRequisicao(String especialidade, String cartao, String data) {
		for(int i = 0; i < verificaEspecialidade(especialidade).size(); i++) {
			if(verificaEspecialidade(especialidade).get(i).getPaciente().getCartao().equals(cartao)) {
				verificaEspecialidade(especialidade).get(i).setEstado("Enviado no dia " + data);
			}}
	}
	
	public void finalizarRequisicao(String especialidade, String cartao, String data) {
		for(int i = 0; i < verificaEspecialidade(especialidade).size(); i++) {
			if(verificaEspecialidade(especialidade).get(i).getPaciente().getCartao().equals(cartao)) {
				verificaEspecialidade(especialidade).get(i).setEstado("Finalizado no dia " + data);
			}}
	}
	
	public String procurarRequisicao(String especialidade, String cartao) {
		for(int i = 0; i < verificaEspecialidade(especialidade).size(); i++) {
			if(verificaEspecialidade(especialidade).get(i).getPaciente().getCartao().equals(cartao)) {
				return verificaEspecialidade(especialidade).get(i).toString();
			}
		} 
		return "Requisição Não encontrada.";
	}
	
	
	
	public void verificaNome(String nome) {
		if (nome.trim().equals("")) {
			throw new IllegalArgumentException("Nome não pode ser vazio.");
		} 
	}
	
	public void verificaCartao(String cartao) {
		if (cartao.trim().equals("")) {
			throw new IllegalArgumentException("O CNS não pode ser vazio.");
		} else if (cartao.length() < 15 || cartao.length() > 15) {
			throw new IllegalArgumentException("O CNS deve possuir 15 digitos.");
		}
	}
	
	public void verificaData(String data) {
		if (data.trim().equals("")) {
			throw new IllegalArgumentException("Data não pode ser vazio.");
		} 
	}
	
	public void verificaEspecialidadeValida(String especialidade) {
		String[] codigos = {"01","02","03","04","05","06","07","08","09"};
		for(int i = 0; i < codigos.length; i++) {
			if(!codigos[i].equals(especialidade)) {
				throw new IllegalArgumentException(codigos[i]);
			}
			break;
		}
		if (especialidade.trim().equals("")) {
			throw new IllegalArgumentException("Especialidade não pode ser vazio.");
		}
	}
}